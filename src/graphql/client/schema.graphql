# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on OBJECT | FIELD_DEFINITION

interface IAccount {
    accountType: AccountType!
    createdAt: DateTime!
    email: String!
    emailVerified: DateTime
    firstName: String!
    id: String!
    image: String
    lastName: String!
    phone: String
}

"An object with an ID"
interface Node {
    "The ID of the object."
    id: ID!
}

interface PayloadError {
    errors: [Error!]!
}

type Account implements IAccount {
    accountType: AccountType!
    createdAt: DateTime!
    email: String!
    emailVerified: DateTime
    firstName: String!
    fullName: String!
    id: String!
    image: String!
    lastName: String!
    phone: String
}

type AccountPayload {
    accountType: AccountType!
    affiliate: AffiliateLight
    applicant: Applicant
    company: Company
    createdAt: DateTime!
    email: String!
    emailVerified: DateTime
    firstName: String!
    id: String!
    image: String
    lastName: String!
    oAuthClient: [OAuth!]!
    phone: String
}

type AccountUpdate implements PayloadError {
    account: AccountPayload
    errors: [Error!]!
}

type Affiliate implements IAccount {
    accountType: AccountType!
    createdAt: DateTime!
    email: String!
    emailVerified: DateTime
    firstName: String!
    id: String!
    image: String
    lastName: String!
    phone: String
}

type AffiliateLight {
    id: String!
}

type Applicant implements Node {
    WorkExperienceYears: Int
    about: String
    accomplishment: String
    account: Account!
    education: String
    englishLevel: EnglishLevel
    experienceYear: Int
    gender: String
    github: String
    id: ID!
    introVideo: String
    jobPosition: String
    languages: [String]
    linkedin: String
    location: String
    otherLanguages: [String]
    portfolio: String
    resume: String
    salaryExpectation: Int
    savedJobs(after: String, before: String, first: Int, last: Int): ApplicantSavedJobPostConnections
    skillLevel: ExperienceLevel
    skills: [String!]
    workExperience: [WorkExperience!]!
}

type ApplicantAccountConnections {
    edges: [ApplicantAccountEdge!]!
    pageInfo: PageInfo!
}

type ApplicantAccountEdge {
    cursor: String!
    node: Account!
}

type ApplicantAppliedJobPostEdge {
    cursor: String!
    node: JobPost!
}

type ApplicantConnection {
    edges: [ApplicantEdge!]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
    "A total count of items in the collection."
    totalCount: Int
}

type ApplicantEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Applicant!
}

type ApplicantSavedJobPostConnections {
    edges: [ApplicantSavedJobPostEdge!]!
    pageInfo: PageInfo!
}

type ApplicantSavedJobPostEdge {
    cursor: String!
    node: JobPost!
}

type Application implements Node {
    applicant: Applicant
    applicantId: String!
    attachment: String
    coverLetter: String!
    createdAt: DateTime!
    email: String!
    id: ID!
    interview: Interview
    jobPost: JobPost
    jobPostId: String!
    offer: Offer
    phone: String!
    resume: String!
    status: ApplicationStatus!
    updatedAt: DateTime!
}

type ApplicationConnections {
    edges: [ApplicationEdge!]!
    pageInfo: PageInfo!
}

type ApplicationEdge {
    cursor: String!
    node: Application!
}

type AuthAccountPayload {
    accountType: AccountType!
    createdAt: DateTime!
    email: String!
    emailVerified: DateTime
    firstName: String!
    id: String!
    image: String
    lastName: String!
    oAuthClient: [OAuth!]!
    phone: String
}

type AuthApplicant {
    experienceYear: Int
    gender: String
    id: String!
    resume: String
}

type AuthPayload implements PayloadError {
    account: AuthAccountPayload
    errors: [Error!]!
}

type Company implements Node {
    account: Account!
    companyName: String
    id: ID!
    logo: String
    savedApplicants: [Applicant!]!
}

type CompanyJobPostsResponse {
    errors: [Error!]!
    jobPosts: [JobPost!]!
}

type CreateApplicationPayload implements PayloadError {
    application: Application
    errors: [Error!]!
}

type Error {
    message: String!
}

type FindOnePayload implements PayloadError {
    account: AccountPayload
    errors: [Error!]!
}

type Interview implements Node {
    answerText: String
    answerVideo: String
    applicantId: String!
    attachment: String
    companyId: String!
    createdAt: DateTime!
    deadline: DateTime
    description: String!
    id: ID!
    jobApplicationId: String
    jobPostId: String!
    status: InterviewStatus
    updatedAt: DateTime!
}

type JobPost implements Node {
    applicationDeadline: DateTime!
    category: [String!]!
    companyId: String!
    createdAt: DateTime!
    description: String!
    email: String!
    englishLevel: EnglishLevel!
    experienceLevel: ExperienceLevel!
    id: ID!
    interviewQuestions: [String!]!
    isVisible: Boolean!
    jobExperience: Int!
    jobSite: JobSite!
    jobType: JobType!
    location: String!
    otherLanguages: [String!]!
    qualifications: [String!]!
    salary: [Int!]!
    salaryType: SalaryType!
    skills: [String!]!
    title: String!
    updatedAt: DateTime!
    vacancy: Int!
}

type JobPostResponse {
    errors: [Error!]!
    jobPost: JobPost
}

type Mutation {
    applicantProfileUpdate(input: ApplicantProfileUpdateInput!): AccountUpdate!
    createApplication(input: CreateApplicationInput!): CreateApplicationPayload!
    createJobPost(input: CreateJobPostInput!): JobPostResponse!
    editJobPost(input: EditJobPostInput!): JobPostResponse!
    logIn(input: LoginInput!): AuthPayload!
    logOut: Boolean!
    offerApplicant(input: OfferApplicantInput!): Offer
    profileUpdate(input: UpdateProfileInput!): AccountUpdate!
    respondInterview(input: RespondInterviewInput!): Interview
    respondToOffer(input: RespondOfferInput!): Offer
    saveApplicant(input: SaveApplicantInput!): Boolean
    saveJobPost(input: SaveJobPostInput!): JobPost
    sayHi: String!
    sendEmail: Boolean
    sendInterviewRequest(input: SendInterviewRequestInput!): Interview
    signUp(input: SignUpInput!): AuthPayload!
    signUpOAuth(input: OAuthSignUpInput!): AuthPayload!
    verifyAccount(input: VerifyAccountInput!): VerifyAccountPayload!
}

type OAuth {
    accessToken: String!
    expires: DateTime!
    id: String!
    provider: String!
    providerAccountId: String!
    refreshToken: String
    tokenType: String!
}

type Offer implements Node {
    answerText: String
    answerVideo: String
    applicantId: String!
    companyId: String!
    createdAt: DateTime!
    deadline: DateTime
    description: String!
    id: ID!
    jobApplicationId: String
    jobPostId: String!
    status: OfferStatus
    updatedAt: DateTime!
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Query {
    findAccount(input: FindAccountFilterInput!): FindOnePayload
    getApplicant(input: GetApplicantInput!): Applicant
    getApplicants(input: GetApplicantsInput!): ApplicantConnection
    getCompanies: [Company!]!
    getCompanyJobPosts(input: GetCompanyJobPostsInput!): CompanyJobPostsResponse!
    getCurrentUser: AccountPayload
    getJobApplications(input: GetJobApplicationsInput!): ApplicationConnections!
    getJobPost(input: GetJobPostInput!): JobPost
    getJobPosts(input: JopPostFilterInput): [JobPost!]!
    getSavedApplicant(input: GetSavedApplicantInput!): [Applicant!]!
    getSavedJobPosts(input: SavedJobPostsInput!): [JobPost!]!
    me: AccountPayload
    sayHi: String
}

type VerifyAccountPayload implements PayloadError {
    account: Account
    errors: [Error!]!
}

type WorkExperience {
    accomplishment: String!
    companyName: String!
    companyWebsite: String
    endDate: DateTime
    ongoing: Boolean!
    position: String!
    skills: [String!]!
    startDate: DateTime!
}

enum AccountSortField {
    "Sort users by created at."
    CREATED_AT
    "Sort users by email."
    EMAIL
    "Sort users by first name."
    FIRST_NAME
    "Sort users by last modified at."
    LAST_MODIFIED_AT
    "Sort users by last name."
    LAST_NAME
}

enum AccountType {
    AFFILIATE
    APPLICANT
    COMPANY
}

enum ApplicationStatus {
    ACCEPTED
    INTERVIEW
    OFFER
    PENDING
    REJECTED
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum EnglishLevel {
    BASIC
    CONVERSATIONAL
    FLUENT
    NATIVE
}

enum ExperienceLevel {
    Beginner
    Expert
    Intermediate
    Junior
    Senior
}

enum Gender {
    FEMALE
    MALE
    OTHER
}

enum InterviewStatus {
    ACCEPTED
    APPLICANT_REFUSED
    APPLICANT_RESPONDED
    PENDING
    REJECTED
}

enum JobSite {
    HYBRID
    ONSITE
    REMOTE
}

enum JobType {
    CONTRACTUAL
    FULL_TIME
    INTERNSHIP
    PART_TIME
}

enum OfferStatus {
    ACCEPTED
    APPLICANT_REFUSED
    PENDING
}

enum OrderDirection {
    "Specifies an ascending sort order."
    ASC
    "Specifies a descending sort order."
    DESC
}

enum SalaryType {
    HOURLY
    MONTHLY
    ONE_TIME
    YEARLY
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

input AccountFilterInput {
    email: String
    id: ID
    phone: String
}

input AccountUpdateInput {
    email: String
    firstName: String
    image: String
    lastName: String
    phone: String
}

input ApplicantFilter {
    ids: [String!]
}

input ApplicantOrdering {
    direction: OrderDirection!
    field: AccountSortField!
}

input ApplicantProfileUpdateInput {
    account: AccountUpdateInput
    accountId: String!
    applicant: ApplicantUpdateInput
}

input ApplicantUpdateInput {
    about: String
    accomplishment: String
    englishLevel: EnglishLevel
    experienceYear: Int
    github: String
    introVideo: String
    jobPosition: String
    linkedin: String
    location: String
    portfolio: String
    resume: String
    salaryExpectation: Int
    skillLevel: ExperienceLevel
    skills: [String!]
    workExperience: [WorkExperienceInput!]
}

input ApplicationFilter {
    applicantId: String
    ids: [String!]
    jobPostId: String
    status: ApplicationStatus
}

input CreateApplicationInput {
    applicantId: String!
    attachment: String
    companyId: String!
    coverLetter: String!
    email: String!
    jobPostId: String!
    phone: String!
    resume: String!
}

input CreateJobPostInput {
    affiliateId: String
    applicationDeadline: DateTime!
    category: [String!]!
    companyId: String!
    description: String!
    email: String!
    englishLevel: EnglishLevel!
    experienceLevel: ExperienceLevel!
    interviewQuestions: [String!]!
    isVisible: Boolean!
    jobExperience: Int!
    jobSite: JobSite!
    jobType: JobType!
    location: String!
    otherLanguages: [String!]!
    postedBy: String!
    qualifications: [String!]!
    salary: [Int!]!
    salaryType: SalaryType!
    skills: [String!]!
    title: String!
    vacancy: Int!
}

input EditJobPostFilter {
    companyId: String!
    jobPostId: String!
}

input EditJobPostInput {
    editedData: EditJobPostInputData!
    filter: EditJobPostFilter!
}

input EditJobPostInputData {
    applicationDeadline: DateTime
    category: [String!]
    description: String
    email: String
    englishLevel: EnglishLevel
    experienceLevel: ExperienceLevel
    interviewQuestions: [String!]
    isVisible: Boolean
    jobExperience: Int
    jobSite: JobSite
    jobType: JobType
    location: String
    otherLanguages: [String!]
    qualifications: [String!]
    salary: [Int!]
    salaryType: SalaryType
    skills: [String!]
    title: String
    vacancy: Int
}

input FindAccountFilterInput {
    accountFilter: AccountFilterInput
    oAuthFilter: OAuthAccountFilterInput
}

input GetApplicantInput {
    id: String!
}

input GetApplicantsInput {
    after: String
    before: String
    filter: ApplicantFilter
    first: Int
    last: Int
    orderBy: [ApplicantOrdering!]
}

input GetCompanyJobPostsInput {
    companyId: String!
}

input GetJobApplicationsInput {
    after: String
    before: String
    filter: ApplicationFilter
    first: Int
    last: Int
    orderBy: [ApplicantOrdering!]
}

input GetJobPostInput {
    id: String!
}

input GetSavedApplicantInput {
    companyId: String!
}

input JopPostFilterInput {
    companyId: String!
}

input LoginInput {
    email: String!
    password: String!
}

input MeInput {
    accountId: String!
}

input OAuthAccountFilterInput {
    provider: String
}

input OAuthAccountInput {
    accountType: AccountType!
    email: String!
    firstName: String!
    image: String
    lastName: String!
    userName: String
}

input OAuthInput {
    accessToken: String!
    expires: DateTime!
    provider: String!
    providerAccountId: String!
    refreshToken: String
    tokenType: String!
}

input OAuthLoginInput {
    OAuth: OAuthInput!
    account: SignUpInput!
}

input OAuthSignUpInput {
    OAuth: OAuthInput!
    account: OAuthAccountInput!
}

input OfferApplicantInput {
    applicantId: String!
    applicationId: String!
    date: DateTime
    description: String!
}

input RespondInterviewInput {
    applicantId: String!
    interviewId: String!
    interviewVideoUrl: String
    refuse: Boolean = false
}

input RespondOfferInput {
    applicantId: String!
    applicationId: String!
    offerId: String!
    refuse: Boolean = false
}

input SaveApplicantInput {
    applicantId: String!
    companyId: String!
    save: Boolean! = true
}

input SaveJobPostInput {
    accountId: String!
    jobPostId: String!
    save: Boolean!
}

input SavedJobPostsInput {
    accountId: String!
}

input SendInterviewRequestInput {
    applicationId: String!
    date: DateTime
    description: String!
}

input SignUpInput {
    accountType: AccountType!
    companyName: String
    country: String!
    email: String!
    firstName: String!
    image: String
    lastName: String!
    name: String
    password: String!
}

input UpdateProfileInput {
    account: AccountUpdateInput
    accountId: String!
    applicant: ApplicantUpdateInput
}

input VerifyAccountInput {
    token: String!
}

input WorkExperienceInput {
    accomplishment: String!
    companyName: String!
    companyWebsite: String
    endDate: DateTime
    ongoing: Boolean!
    position: String!
    skills: [String!]!
    startDate: DateTime!
}
